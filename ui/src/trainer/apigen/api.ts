// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * NERd
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CorpusSnapshot
 */
export interface CorpusSnapshot {
    /**
     * 
     * @type {Date}
     * @memberof CorpusSnapshot
     */
    trained_at?: Date;
    /**
     * 
     * @type {number}
     * @memberof CorpusSnapshot
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof CorpusSnapshot
     */
    created_at?: Date;
    /**
     * 
     * @type {number}
     * @memberof CorpusSnapshot
     */
    semaphore?: number;
    /**
     * 
     * @type {string}
     * @memberof CorpusSnapshot
     */
    types?: string;
}

/**
 * 
 * @export
 * @interface HttpError
 */
export interface HttpError {
    /**
     * A description of the error
     * @type {string}
     * @memberof HttpError
     */
    status: string;
}

/**
 * 
 * @export
 * @interface Register
 */
export interface Register {
    /**
     * 
     * @type {string}
     * @memberof Register
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Register
     */
    plain_password?: string;
    /**
     * 
     * @type {string}
     * @memberof Register
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Register
     */
    email?: string;
}

/**
 * 
 * @export
 * @interface RoleList
 */
export interface RoleList {
    /**
     * 
     * @type {Array<string>}
     * @memberof RoleList
     */
    roles?: Array<string>;
}

/**
 * 
 * @export
 * @interface Snapshot
 */
export interface Snapshot {
    /**
     * 
     * @type {{ [key: string]: Type; }}
     * @memberof Snapshot
     */
    types?: { [key: string]: Type; };
    /**
     * 
     * @type {Date}
     * @memberof Snapshot
     */
    trained_at?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Snapshot
     */
    created_at?: Date;
    /**
     * 
     * @type {number}
     * @memberof Snapshot
     */
    id: number;
}

/**
 * 
 * @export
 * @interface SpacyDocument
 */
export interface SpacyDocument {
    /**
     * 
     * @type {string}
     * @memberof SpacyDocument
     */
    text: string;
    /**
     * 
     * @type {Array<SpacySentence>}
     * @memberof SpacyDocument
     */
    sents?: Array<SpacySentence>;
    /**
     * 
     * @type {Array<SpacyToken>}
     * @memberof SpacyDocument
     */
    tokens?: Array<SpacyToken>;
    /**
     * 
     * @type {Date}
     * @memberof SpacyDocument
     */
    _created_at?: Date;
    /**
     * 
     * @type {Array<SpacyEntity>}
     * @memberof SpacyDocument
     */
    ents?: Array<SpacyEntity>;
}

/**
 * 
 * @export
 * @interface SpacyEntity
 */
export interface SpacyEntity {
    /**
     * 
     * @type {number}
     * @memberof SpacyEntity
     */
    end: number;
    /**
     * 
     * @type {number}
     * @memberof SpacyEntity
     */
    start: number;
    /**
     * 
     * @type {string}
     * @memberof SpacyEntity
     */
    label: string;
}

/**
 * 
 * @export
 * @interface SpacySentence
 */
export interface SpacySentence {
    /**
     * 
     * @type {number}
     * @memberof SpacySentence
     */
    end: number;
    /**
     * 
     * @type {number}
     * @memberof SpacySentence
     */
    start: number;
}

/**
 * 
 * @export
 * @interface SpacyToken
 */
export interface SpacyToken {
    /**
     * 
     * @type {string}
     * @memberof SpacyToken
     */
    tag?: string;
    /**
     * 
     * @type {number}
     * @memberof SpacyToken
     */
    end: number;
    /**
     * 
     * @type {number}
     * @memberof SpacyToken
     */
    start: number;
    /**
     * 
     * @type {number}
     * @memberof SpacyToken
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof SpacyToken
     */
    dep?: string;
    /**
     * 
     * @type {string}
     * @memberof SpacyToken
     */
    pos?: string;
    /**
     * 
     * @type {number}
     * @memberof SpacyToken
     */
    head?: number;
}

/**
 * 
 * @export
 * @interface Text
 */
export interface Text {
    /**
     * 
     * @type {string}
     * @memberof Text
     */
    value: string;
    /**
     * 
     * @type {Date}
     * @memberof Text
     */
    created_at?: Date;
    /**
     * 
     * @type {{ [key: string]: SpacyDocument; }}
     * @memberof Text
     */
    trainings?: { [key: string]: SpacyDocument; };
    /**
     * 
     * @type {string}
     * @memberof Text
     */
    id?: string;
}

/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    grant_type?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    password: string;
}

/**
 * 
 * @export
 * @interface TrainText
 */
export interface TrainText {
    /**
     * 
     * @type {string}
     * @memberof TrainText
     */
    text_id: string;
    /**
     * 
     * @type {Snapshot}
     * @memberof TrainText
     */
    snapshot: Snapshot;
    /**
     * 
     * @type {SpacyDocument}
     * @memberof TrainText
     */
    spacy_document: SpacyDocument;
}

/**
 * 
 * @export
 * @interface Type
 */
export interface Type {
    /**
     * 
     * @type {string}
     * @memberof Type
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof Type
     */
    label: string;
}

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof User
     */
    roles?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
}

/**
 * 
 * @export
 * @interface UserCredentials
 */
export interface UserCredentials {
    /**
     * A temporary JWT
     * @type {string}
     * @memberof UserCredentials
     */
    access_token: string;
    /**
     * A refresh token
     * @type {string}
     * @memberof UserCredentials
     */
    refresh_token: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserCredentials
     */
    roles?: Array<string>;
}

/**
 * 
 * @export
 * @interface UserPayload
 */
export interface UserPayload {
    /**
     * 
     * @type {string}
     * @memberof UserPayload
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserPayload
     */
    roles?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UserPayload
     */
    plain_password?: string;
    /**
     * 
     * @type {string}
     * @memberof UserPayload
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface ValueOnlyText
 */
export interface ValueOnlyText {
    /**
     * 
     * @type {string}
     * @memberof ValueOnlyText
     */
    value: string;
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generate new access and refresh tokens with password grant_type
         * @param {Token} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessToken(token: Token, options: any = {}): RequestArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling createAccessToken.');
            }
            const localVarPath = `/api/auth/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Token" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(token !== undefined ? token : {}) : (token || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh access token
         * @param {string} grant_type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAccessToken(grant_type: string, options: any = {}): RequestArgs {
            // verify required parameter 'grant_type' is not null or undefined
            if (grant_type === null || grant_type === undefined) {
                throw new RequiredError('grant_type','Required parameter grant_type was null or undefined when calling refreshAccessToken.');
            }
            const localVarPath = `/api/auth/refresh`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (grant_type !== undefined) {
                localVarQueryParameter['grant_type'] = grant_type;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns user credentials to skip login on register
         * @summary Register a new user
         * @param {Register} register 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(register: Register, options: any = {}): RequestArgs {
            // verify required parameter 'register' is not null or undefined
            if (register === null || register === undefined) {
                throw new RequiredError('register','Required parameter register was null or undefined when calling registerUser.');
            }
            const localVarPath = `/api/auth/register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Register" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(register !== undefined ? register : {}) : (register || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generate new access and refresh tokens with password grant_type
         * @param {Token} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessToken(token: Token, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCredentials> {
            const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).createAccessToken(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Refresh access token
         * @param {string} grant_type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAccessToken(grant_type: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCredentials> {
            const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).refreshAccessToken(grant_type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns user credentials to skip login on register
         * @summary Register a new user
         * @param {Register} register 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(register: Register, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCredentials> {
            const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).registerUser(register, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Generate new access and refresh tokens with password grant_type
         * @param {Token} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessToken(token: Token, options?: any) {
            return AuthApiFp(configuration).createAccessToken(token, options)(axios, basePath);
        },
        /**
         * 
         * @summary Refresh access token
         * @param {string} grant_type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAccessToken(grant_type: string, options?: any) {
            return AuthApiFp(configuration).refreshAccessToken(grant_type, options)(axios, basePath);
        },
        /**
         * Returns user credentials to skip login on register
         * @summary Register a new user
         * @param {Register} register 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(register: Register, options?: any) {
            return AuthApiFp(configuration).registerUser(register, options)(axios, basePath);
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Generate new access and refresh tokens with password grant_type
     * @param {Token} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public createAccessToken(token: Token, options?: any) {
        return AuthApiFp(this.configuration).createAccessToken(token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Refresh access token
     * @param {string} grant_type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refreshAccessToken(grant_type: string, options?: any) {
        return AuthApiFp(this.configuration).refreshAccessToken(grant_type, options)(this.axios, this.basePath);
    }

    /**
     * Returns user credentials to skip login on register
     * @summary Register a new user
     * @param {Register} register 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public registerUser(register: Register, options?: any) {
        return AuthApiFp(this.configuration).registerUser(register, options)(this.axios, this.basePath);
    }

}


/**
 * CorpusApi - axios parameter creator
 * @export
 */
export const CorpusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ValueOnlyText} value_only_text 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewText(value_only_text: ValueOnlyText, options: any = {}): RequestArgs {
            // verify required parameter 'value_only_text' is not null or undefined
            if (value_only_text === null || value_only_text === undefined) {
                throw new RequiredError('value_only_text','Required parameter value_only_text was null or undefined when calling addNewText.');
            }
            const localVarPath = `/api/corpus/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2Password required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oAuth2Password", ["user", "admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"ValueOnlyText" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(value_only_text !== undefined ? value_only_text : {}) : (value_only_text || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCorpus(page?: number, page_size?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/corpus/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2Password required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oAuth2Password", ["user", "admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} text_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCorpusText(text_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'text_id' is not null or undefined
            if (text_id === null || text_id === undefined) {
                throw new RequiredError('text_id','Required parameter text_id was null or undefined when calling getCorpusText.');
            }
            const localVarPath = `/api/corpus/{text_id}`
                .replace(`{${"text_id"}}`, encodeURIComponent(String(text_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2Password required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oAuth2Password", ["user", "admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} text_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCorpusText(text_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'text_id' is not null or undefined
            if (text_id === null || text_id === undefined) {
                throw new RequiredError('text_id','Required parameter text_id was null or undefined when calling removeCorpusText.');
            }
            const localVarPath = `/api/corpus/{text_id}`
                .replace(`{${"text_id"}}`, encodeURIComponent(String(text_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2Password required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oAuth2Password", ["user", "admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        train(options: any = {}): RequestArgs {
            const localVarPath = `/api/corpus/train`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2Password required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oAuth2Password", ["user", "admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} text_id 
         * @param {number} user_id 
         * @param {SpacyDocument} spacy_document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertTraining(text_id: string, user_id: number, spacy_document: SpacyDocument, options: any = {}): RequestArgs {
            // verify required parameter 'text_id' is not null or undefined
            if (text_id === null || text_id === undefined) {
                throw new RequiredError('text_id','Required parameter text_id was null or undefined when calling upsertTraining.');
            }
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id','Required parameter user_id was null or undefined when calling upsertTraining.');
            }
            // verify required parameter 'spacy_document' is not null or undefined
            if (spacy_document === null || spacy_document === undefined) {
                throw new RequiredError('spacy_document','Required parameter spacy_document was null or undefined when calling upsertTraining.');
            }
            const localVarPath = `/api/corpus/{text_id}/trainings/{user_id}`
                .replace(`{${"text_id"}}`, encodeURIComponent(String(text_id)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(user_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2Password required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oAuth2Password", ["user", "admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"SpacyDocument" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(spacy_document !== undefined ? spacy_document : {}) : (spacy_document || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} text_id 
         * @param {SpacyDocument} spacy_document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertTraining_1(text_id: string, spacy_document: SpacyDocument, options: any = {}): RequestArgs {
            // verify required parameter 'text_id' is not null or undefined
            if (text_id === null || text_id === undefined) {
                throw new RequiredError('text_id','Required parameter text_id was null or undefined when calling upsertTraining_1.');
            }
            // verify required parameter 'spacy_document' is not null or undefined
            if (spacy_document === null || spacy_document === undefined) {
                throw new RequiredError('spacy_document','Required parameter spacy_document was null or undefined when calling upsertTraining_1.');
            }
            const localVarPath = `/api/corpus/{text_id}/trainings/me`
                .replace(`{${"text_id"}}`, encodeURIComponent(String(text_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2Password required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oAuth2Password", ["user", "admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"SpacyDocument" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(spacy_document !== undefined ? spacy_document : {}) : (spacy_document || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CorpusApi - functional programming interface
 * @export
 */
export const CorpusApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ValueOnlyText} value_only_text 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewText(value_only_text: ValueOnlyText, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = CorpusApiAxiosParamCreator(configuration).addNewText(value_only_text, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCorpus(page?: number, page_size?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Text>> {
            const localVarAxiosArgs = CorpusApiAxiosParamCreator(configuration).getCorpus(page, page_size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} text_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCorpusText(text_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Text> {
            const localVarAxiosArgs = CorpusApiAxiosParamCreator(configuration).getCorpusText(text_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} text_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCorpusText(text_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = CorpusApiAxiosParamCreator(configuration).removeCorpusText(text_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        train(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainText> {
            const localVarAxiosArgs = CorpusApiAxiosParamCreator(configuration).train(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} text_id 
         * @param {number} user_id 
         * @param {SpacyDocument} spacy_document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertTraining(text_id: string, user_id: number, spacy_document: SpacyDocument, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = CorpusApiAxiosParamCreator(configuration).upsertTraining(text_id, user_id, spacy_document, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} text_id 
         * @param {SpacyDocument} spacy_document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertTraining_1(text_id: string, spacy_document: SpacyDocument, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = CorpusApiAxiosParamCreator(configuration).upsertTraining_1(text_id, spacy_document, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CorpusApi - factory interface
 * @export
 */
export const CorpusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {ValueOnlyText} value_only_text 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewText(value_only_text: ValueOnlyText, options?: any) {
            return CorpusApiFp(configuration).addNewText(value_only_text, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCorpus(page?: number, page_size?: number, options?: any) {
            return CorpusApiFp(configuration).getCorpus(page, page_size, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} text_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCorpusText(text_id: string, options?: any) {
            return CorpusApiFp(configuration).getCorpusText(text_id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} text_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCorpusText(text_id: string, options?: any) {
            return CorpusApiFp(configuration).removeCorpusText(text_id, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        train(options?: any) {
            return CorpusApiFp(configuration).train(options)(axios, basePath);
        },
        /**
         * 
         * @param {string} text_id 
         * @param {number} user_id 
         * @param {SpacyDocument} spacy_document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertTraining(text_id: string, user_id: number, spacy_document: SpacyDocument, options?: any) {
            return CorpusApiFp(configuration).upsertTraining(text_id, user_id, spacy_document, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} text_id 
         * @param {SpacyDocument} spacy_document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertTraining_1(text_id: string, spacy_document: SpacyDocument, options?: any) {
            return CorpusApiFp(configuration).upsertTraining_1(text_id, spacy_document, options)(axios, basePath);
        },
    };
};

/**
 * CorpusApi - object-oriented interface
 * @export
 * @class CorpusApi
 * @extends {BaseAPI}
 */
export class CorpusApi extends BaseAPI {
    /**
     * 
     * @param {ValueOnlyText} value_only_text 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorpusApi
     */
    public addNewText(value_only_text: ValueOnlyText, options?: any) {
        return CorpusApiFp(this.configuration).addNewText(value_only_text, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [page_size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorpusApi
     */
    public getCorpus(page?: number, page_size?: number, options?: any) {
        return CorpusApiFp(this.configuration).getCorpus(page, page_size, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} text_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorpusApi
     */
    public getCorpusText(text_id: string, options?: any) {
        return CorpusApiFp(this.configuration).getCorpusText(text_id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} text_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorpusApi
     */
    public removeCorpusText(text_id: string, options?: any) {
        return CorpusApiFp(this.configuration).removeCorpusText(text_id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorpusApi
     */
    public train(options?: any) {
        return CorpusApiFp(this.configuration).train(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} text_id 
     * @param {number} user_id 
     * @param {SpacyDocument} spacy_document 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorpusApi
     */
    public upsertTraining(text_id: string, user_id: number, spacy_document: SpacyDocument, options?: any) {
        return CorpusApiFp(this.configuration).upsertTraining(text_id, user_id, spacy_document, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} text_id 
     * @param {SpacyDocument} spacy_document 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorpusApi
     */
    public upsertTraining_1(text_id: string, spacy_document: SpacyDocument, options?: any) {
        return CorpusApiFp(this.configuration).upsertTraining_1(text_id, spacy_document, options)(this.axios, this.basePath);
    }

}


/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a list of available roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles(options: any = {}): RequestArgs {
            const localVarPath = `/api/roles/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2Password required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oAuth2Password", ["user", "admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a list of available roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleList> {
            const localVarAxiosArgs = RolesApiAxiosParamCreator(configuration).listRoles(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Returns a list of available roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles(options?: any) {
            return RolesApiFp(configuration).listRoles(options)(axios, basePath);
        },
    };
};

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
    /**
     * 
     * @summary Returns a list of available roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public listRoles(options?: any) {
        return RolesApiFp(this.configuration).listRoles(options)(this.axios, this.basePath);
    }

}


/**
 * SnapshotsApi - axios parameter creator
 * @export
 */
export const SnapshotsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List available corpora
         * @param {number} [page] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCorpusSnapshots(page?: number, page_size?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/snapshots`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2Password required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oAuth2Password", ["user", "admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SnapshotsApi - functional programming interface
 * @export
 */
export const SnapshotsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List available corpora
         * @param {number} [page] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCorpusSnapshots(page?: number, page_size?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CorpusSnapshot>> {
            const localVarAxiosArgs = SnapshotsApiAxiosParamCreator(configuration).listCorpusSnapshots(page, page_size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SnapshotsApi - factory interface
 * @export
 */
export const SnapshotsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary List available corpora
         * @param {number} [page] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCorpusSnapshots(page?: number, page_size?: number, options?: any) {
            return SnapshotsApiFp(configuration).listCorpusSnapshots(page, page_size, options)(axios, basePath);
        },
    };
};

/**
 * SnapshotsApi - object-oriented interface
 * @export
 * @class SnapshotsApi
 * @extends {BaseAPI}
 */
export class SnapshotsApi extends BaseAPI {
    /**
     * 
     * @summary List available corpora
     * @param {number} [page] 
     * @param {number} [page_size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    public listCorpusSnapshots(page?: number, page_size?: number, options?: any) {
        return SnapshotsApiFp(this.configuration).listCorpusSnapshots(page, page_size, options)(this.axios, this.basePath);
    }

}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete user by email
         * @param {string} user_email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(user_email: string, options: any = {}): RequestArgs {
            // verify required parameter 'user_email' is not null or undefined
            if (user_email === null || user_email === undefined) {
                throw new RequiredError('user_email','Required parameter user_email was null or undefined when calling deleteUser.');
            }
            const localVarPath = `/api/users/{user_email}`
                .replace(`{${"user_email"}}`, encodeURIComponent(String(user_email)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2Password required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oAuth2Password", ["user", "admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of existing users
         * @param {number} [page] 
         * @param {number} [page_size] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(page?: number, page_size?: number, query?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/users/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2Password required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oAuth2Password", ["user", "admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patches the user entity
         * @param {string} user_email 
         * @param {UserPayload} user_payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(user_email: string, user_payload: UserPayload, options: any = {}): RequestArgs {
            // verify required parameter 'user_email' is not null or undefined
            if (user_email === null || user_email === undefined) {
                throw new RequiredError('user_email','Required parameter user_email was null or undefined when calling updateUser.');
            }
            // verify required parameter 'user_payload' is not null or undefined
            if (user_payload === null || user_payload === undefined) {
                throw new RequiredError('user_payload','Required parameter user_payload was null or undefined when calling updateUser.');
            }
            const localVarPath = `/api/users/{user_email}`
                .replace(`{${"user_email"}}`, encodeURIComponent(String(user_email)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2Password required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oAuth2Password", ["user", "admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"UserPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(user_payload !== undefined ? user_payload : {}) : (user_payload || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets user entity by email
         * @param {string} user_email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDetails(user_email: string, options: any = {}): RequestArgs {
            // verify required parameter 'user_email' is not null or undefined
            if (user_email === null || user_email === undefined) {
                throw new RequiredError('user_email','Required parameter user_email was null or undefined when calling userDetails.');
            }
            const localVarPath = `/api/users/{user_email}`
                .replace(`{${"user_email"}}`, encodeURIComponent(String(user_email)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2Password required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oAuth2Password", ["user", "admin"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete user by email
         * @param {string} user_email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(user_email: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).deleteUser(user_email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns a list of existing users
         * @param {number} [page] 
         * @param {number} [page_size] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(page?: number, page_size?: number, query?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).listUsers(page, page_size, query, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Patches the user entity
         * @param {string} user_email 
         * @param {UserPayload} user_payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(user_email: string, user_payload: UserPayload, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).updateUser(user_email, user_payload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets user entity by email
         * @param {string} user_email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDetails(user_email: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).userDetails(user_email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Delete user by email
         * @param {string} user_email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(user_email: string, options?: any) {
            return UsersApiFp(configuration).deleteUser(user_email, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns a list of existing users
         * @param {number} [page] 
         * @param {number} [page_size] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(page?: number, page_size?: number, query?: string, options?: any) {
            return UsersApiFp(configuration).listUsers(page, page_size, query, options)(axios, basePath);
        },
        /**
         * 
         * @summary Patches the user entity
         * @param {string} user_email 
         * @param {UserPayload} user_payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(user_email: string, user_payload: UserPayload, options?: any) {
            return UsersApiFp(configuration).updateUser(user_email, user_payload, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets user entity by email
         * @param {string} user_email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDetails(user_email: string, options?: any) {
            return UsersApiFp(configuration).userDetails(user_email, options)(axios, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Delete user by email
     * @param {string} user_email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(user_email: string, options?: any) {
        return UsersApiFp(this.configuration).deleteUser(user_email, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns a list of existing users
     * @param {number} [page] 
     * @param {number} [page_size] 
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUsers(page?: number, page_size?: number, query?: string, options?: any) {
        return UsersApiFp(this.configuration).listUsers(page, page_size, query, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Patches the user entity
     * @param {string} user_email 
     * @param {UserPayload} user_payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(user_email: string, user_payload: UserPayload, options?: any) {
        return UsersApiFp(this.configuration).updateUser(user_email, user_payload, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets user entity by email
     * @param {string} user_email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userDetails(user_email: string, options?: any) {
        return UsersApiFp(this.configuration).userDetails(user_email, options)(this.axios, this.basePath);
    }

}


